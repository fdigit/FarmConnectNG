// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  password      String
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  farmerProfile Farmer?
  orders        Order[]
  reviews       Review[]
  wishlist      Wishlist[]
}

model Farmer {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @unique @db.ObjectId
  user            User      @relation(fields: [userId], references: [id])
  farmName        String
  farmLocation    String
  farmDescription String?
  certifications  String[]
  isApproved      Boolean   @default(false)
  isOnVacation    Boolean   @default(false)
  vacationMessage String?
  products        Product[]
  orders          Order[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  unit        String
  stock       Int
  images      String[]
  category    String
  isOrganic   Boolean   @default(false)
  harvestDate DateTime?
  shelfLife   Int?      // in days
  farmerId    String    @db.ObjectId
  farmer      Farmer    @relation(fields: [farmerId], references: [id])
  orders      OrderItem[]
  reviews     Review[]
  wishlist    Wishlist[]
  isApproved  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String      @db.ObjectId
  user            User        @relation(fields: [userId], references: [id])
  farmerId        String      @db.ObjectId
  farmer          Farmer      @relation(fields: [farmerId], references: [id])
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  deliveryFee     Float
  deliveryType    DeliveryType
  deliveryAddress String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

enum Role {
  ADMIN
  FARMER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_DELIVERY
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum DeliveryType {
  PICKUP
  FARM_DELIVERY
  THIRD_PARTY
} 